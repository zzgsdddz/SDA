library(carData)
install.packages("carData")
library(carData)
Davis <- Davis[-12, ]
head(Davis)
# Load necessary libraries
library(ggplot2)
# Split data by sex
Davis_M <- subset(Davis, sex == "M")
Davis_F <- subset(Davis, sex == "F")
# Set up plotting area
par(mfrow = c(2, 2))
# Histograms for height distributions (scaled to density)
hist(Davis_M$height, probability = TRUE, main = "Height Distribution (Males)", xlab = "Height (cm)", col = "blue")
hist(Davis_F$height, probability = TRUE, main = "Height Distribution (Females)", xlab = "Height (cm)", col = "red")
# QQ-plots for normality check
qqnorm(Davis_M$height, main = "QQ-Plot (Males)")
qqline(Davis_M$height)
qqnorm(Davis_F$height, main = "QQ-Plot (Females)")
qqline(Davis_F$height)
# Normality test using Shapiro-Wilk
shapiro.test(Davis_M$height)
shapiro.test(Davis_F$height)
# Load necessary libraries
library(ggplot2)
# Split data by sex
Davis_M <- subset(Davis, sex == "M")
Davis_F <- subset(Davis, sex == "F")
# Set up plotting area
par(mfrow = c(2, 2))
# Histograms for height distributions (scaled to density)
hist(Davis_M$height, probability = TRUE, main = "Height Distribution (Males)", xlab = "Height (cm)", col = "blue")
hist(Davis_F$height, probability = TRUE, main = "Height Distribution (Females)", xlab = "Height (cm)", col = "red")
# QQ-plots for normality check
qqnorm(Davis_M$height, main = "QQ-Plot (Males)")
qqline(Davis_M$height)
qqnorm(Davis_F$height, main = "QQ-Plot (Females)")
qqline(Davis_F$height)
# Normality test using Shapiro-Wilk
shapiro.test(Davis_M$height)
shapiro.test(Davis_F$height)
# Set seed for reproducibility
set.seed(1234)
# Function to compute the difference in means
mean_diff <- function(data) {
mean(data$height[data$sex == "M"]) - mean(data$height[data$sex == "F"])
}
# **Empirical Bootstrap**
n_bootstrap <- 1000  # Number of bootstrap samples
boot_diffs_empirical <- replicate(n_bootstrap, {
resample_M <- sample(Davis_M$height, replace = TRUE)
resample_F <- sample(Davis_F$height, replace = TRUE)
mean(resample_M) - mean(resample_F)
})
# Standard deviation of bootstrap samples (empirical bootstrap)
sd_empirical <- sd(boot_diffs_empirical)
# **Parametric Bootstrap (assuming normality)**
parametric_boot_diffs <- replicate(n_bootstrap, {
resample_M <- rnorm(length(Davis_M$height), mean(Davis_M$height), sd(Davis_M$height))
resample_F <- rnorm(length(Davis_F$height), mean(Davis_F$height), sd(Davis_F$height))
mean(resample_M) - mean(resample_F)
})
# Standard deviation of bootstrap samples (parametric bootstrap)
sd_parametric <- sd(parametric_boot_diffs)
# Print results
cat("Empirical Bootstrap SD:", sd_empirical, "\n")
cat("Parametric Bootstrap SD:", sd_parametric, "\n")
# Given values
mu_M <- 177.8
mu_F <- 164.6
sigma_M <- 6.5
sigma_F <- 5.5
n_M <- length(Davis_M$height)
n_F <- length(Davis_F$height)
# Compute theoretical standard deviation
theoretical_sd <- sqrt((sigma_M^2 / n_M) + (sigma_F^2 / n_F))
cat("Theoretical SD:", theoretical_sd, "\n")
# Compare theoretical vs. bootstrap estimates
comparison <- data.frame(
Method = c("Empirical Bootstrap", "Parametric Bootstrap", "Theoretical"),
SD = c(sd_empirical, sd_parametric, theoretical_sd)
)
print(comparison)
# Set boundaries for uniform distribution
min_M <- min(Davis_M$height)
max_M <- max(Davis_M$height)
min_F <- min(Davis_F$height)
max_F <- max(Davis_F$height)
# Perform parametric bootstrap with uniform distribution
uniform_boot_diffs <- replicate(n_bootstrap, {
resample_M <- runif(n_M, min_M, max_M)
resample_F <- runif(n_F, min_F, max_F)
mean(resample_M) - mean(resample_F)
})
# Standard deviation of bootstrap samples (uniform distribution)
sd_uniform <- sd(uniform_boot_diffs)
cat("Uniform Bootstrap SD:", sd_uniform, "\n")
# Compare with theoretical standard deviation
comparison <- rbind(comparison, c("Uniform Bootstrap", sd_uniform))
print(comparison)
# Load necessary libraries
library(ggplot2)
# Split data by sex
Davis_M <- subset(Davis, sex == "M")
Davis_F <- subset(Davis, sex == "F")
# Set up plotting area
par(mfrow = c(2, 2))
# Histograms for height distributions (scaled to density)
hist(Davis_M$height, probability = TRUE, main = "Height Distribution (Males)", xlab = "Height (cm)", col = "blue")
hist(Davis_F$height, probability = TRUE, main = "Height Distribution (Females)", xlab = "Height (cm)", col = "red")
# QQ-plots for normality check
qqnorm(Davis_M$height, main = "QQ-Plot (Males)")
qqline(Davis_M$height)
qqnorm(Davis_F$height, main = "QQ-Plot (Females)")
qqline(Davis_F$height)
# Normality test using Shapiro-Wilk
shapiro.test(Davis_M$height)
shapiro.test(Davis_F$height)
hist(Davis_M$height, probability = TRUE, main = "Height Distribution (Males)", xlab = "Height (cm)", col = "blue")
# Load necessary libraries
library(ggplot2)
# Split data by sex
Davis_M <- subset(Davis, sex == "M")
Davis_F <- subset(Davis, sex == "F")
# Set up plotting area
par(mfrow = c(2, 2))
# Histograms for height distributions (scaled to density)
hist(Davis_M$height, probability = TRUE, main = "Height Distribution (Males)", xlab = "Height (cm)", col = "blue")
hist(Davis_F$height, probability = TRUE, main = "Height Distribution (Females)", xlab = "Height (cm)", col = "red")
# QQ-plots for normality check
qqnorm(Davis_M$height, main = "QQ-Plot (Males)")
qqline(Davis_M$height)
qqnorm(Davis_F$height, main = "QQ-Plot (Females)")
qqline(Davis_F$height)
# Normality test using Shapiro-Wilk
shapiro.test(Davis_M$height)
shapiro.test(Davis_F$height)
# Load the data
grades <- readRDS("grades.RDS")
on_time <- grades$on_time
late <- grades$late
# Shapiro-Wilk Test for normality
shapiro_on_time <- shapiro.test(on_time)
shapiro_late <- shapiro.test(late)
# Print results
cat("Shapiro-Wilk Test for on_time:\n")
print(shapiro_on_time)
cat("\nShapiro-Wilk Test for late:\n")
print(shapiro_late)
# Based on these results, assess if a one-sample t-test is appropriate
# One-sample t-test is appropriate only if data is approximately normal
# Remove values equal to 7, as they don't contribute to the sign test
filtered_on_time <- on_time[on_time != 7]
# Count how many are greater than 7
n <- length(filtered_on_time)
num_positive <- sum(filtered_on_time > 7)
# Exact binomial test (sign test)
sign_test <- binom.test(num_positive, n, p = 0.5, alternative = "greater")
cat("\nSign Test Result (on_time > 7):\n")
print(sign_test)
# Normal approximation
# Mean and standard deviation under H0
mu <- n * 0.5
sigma <- sqrt(n * 0.5 * 0.5)
# Normal approximation (continuity correction)
z <- (num_positive - mu - 0.5) / sigma
p_norm <- 1 - pnorm(z)
cat("\nNormal approximation p-value:\n")
print(p_norm)
# Remove values equal to 7
filtered_late <- late[late != 7]
# Count how many are greater than 7
n_late <- length(filtered_late)
num_positive_late <- sum(filtered_late > 7)
# Exact binomial test (sign test)
sign_test_late <- binom.test(num_positive_late, n_late, p = 0.5, alternative = "greater")
cat("\nSign Test Result (late > 7):\n")
print(sign_test_late)
# Normal approximation
mu_late <- n_late * 0.5
sigma_late <- sqrt(n_late * 0.5 * 0.5)
z_late <- (num_positive_late - mu_late - 0.5) / sigma_late
p_norm_late <- 1 - pnorm(z_late)
cat("\nNormal approximation p-value (late):\n")
print(p_norm_late)
# Load the data
grades <- readRDS("grades.RDS")
on_time <- grades$on_time
late <- grades$late
# Shapiro-Wilk Test for normality
shapiro_on_time <- shapiro.test(on_time)
shapiro_late <- shapiro.test(late)
# Print results
cat("Shapiro-Wilk Test for on_time:\n")
print(shapiro_on_time)
cat("\nShapiro-Wilk Test for late:\n")
print(shapiro_late)
# Remove values equal to 7, as they don't contribute to the sign test
filtered_on_time <- on_time[on_time != 7]
# Count how many are greater than 7
n <- length(filtered_on_time)
num_positive <- sum(filtered_on_time > 7)
# Exact binomial test (sign test)
sign_test <- binom.test(num_positive, n, p = 0.5, alternative = "greater")
cat("\nSign Test Result (on_time > 7):\n")
print(sign_test)
# Normal approximation
# Mean and standard deviation under H0
mu <- n * 0.5
sigma <- sqrt(n * 0.5 * 0.5)
# Normal approximation (continuity correction)
z <- (num_positive - mu - 0.5) / sigma
p_norm <- 1 - pnorm(z)
cat("\nNormal approximation p-value:\n")
print(p_norm)
# Remove values equal to 7
filtered_late <- late[late != 7]
# Count how many are greater than 7
n_late <- length(filtered_late)
num_positive_late <- sum(filtered_late > 7)
# Exact binomial test (sign test)
sign_test_late <- binom.test(num_positive_late, n_late, p = 0.5, alternative = "greater")
cat("\nSign Test Result (late > 7):\n")
print(sign_test_late)
# Normal approximation
mu_late <- n_late * 0.5
sigma_late <- sqrt(n_late * 0.5 * 0.5)
z_late <- (num_positive_late - mu_late - 0.5) / sigma_late
p_norm_late <- 1 - pnorm(z_late)
cat("\nNormal approximation p-value (late):\n")
print(p_norm_late)
# Load the data
grades <- readRDS("grades.RDS")
on_time <- grades$on_time
late <- grades$late
# Shapiro-Wilk Test for normality
shapiro_on_time <- shapiro.test(on_time)
shapiro_late <- shapiro.test(late)
# Print results
cat("Shapiro-Wilk Test for on_time:\n")
print(shapiro_on_time)
cat("\nShapiro-Wilk Test for late:\n")
print(shapiro_late)
# Remove values equal to 7, as they don't contribute to the sign test
filtered_on_time <- on_time[on_time != 7]
# Count how many are greater than 7
n <- length(filtered_on_time)
num_positive <- sum(filtered_on_time > 7)
# Exact binomial test (sign test)
sign_test <- binom.test(num_positive, n, p = 0.5, alternative = "greater")
cat("\nSign Test Result (on_time > 7):\n")
print(sign_test)
# Normal approximation
# Mean and standard deviation under H0
mu <- n * 0.5
sigma <- sqrt(n * 0.5 * 0.5)
# Normal approximation (continuity correction)
z <- (num_positive - mu ) / sigma
p_norm <- 1 - pnorm(z)
cat("\nNormal approximation p-value:\n")
print(p_norm)
# Remove values equal to 7
filtered_late <- late[late != 7]
# Count how many are greater than 7
n_late <- length(filtered_late)
num_positive_late <- sum(filtered_late > 7)
# Exact binomial test (sign test)
sign_test_late <- binom.test(num_positive_late, n_late, p = 0.5, alternative = "greater")
cat("\nSign Test Result (late > 7):\n")
print(sign_test_late)
# Normal approximation
mu_late <- n_late * 0.5
sigma_late <- sqrt(n_late * 0.5 * 0.5)
z_late <- (num_positive_late - mu_late - 0.5) / sigma_late
p_norm_late <- 1 - pnorm(z_late)
cat("\nNormal approximation p-value (late):\n")
print(p_norm_late)
# Load the data
grades <- readRDS("grades.RDS")
on_time <- grades$on_time
late <- grades$late
# Shapiro-Wilk Test for normality
shapiro_on_time <- shapiro.test(on_time)
shapiro_late <- shapiro.test(late)
# Print results
cat("Shapiro-Wilk Test for on_time:\n")
print(shapiro_on_time)
cat("\nShapiro-Wilk Test for late:\n")
print(shapiro_late)
# Remove values equal to 7, as they don't contribute to the sign test
filtered_on_time <- on_time[on_time != 7]
# Count how many are greater than 7
n <- length(filtered_on_time)
num_positive <- sum(filtered_on_time > 7)
# Exact binomial test (sign test)
sign_test <- binom.test(num_positive, n, p = 0.5, alternative = "greater")
cat("\nSign Test Result (on_time > 7):\n")
print(sign_test)
# Normal approximation
# Mean and standard deviation under H0
mu <- n * 0.5
sigma <- sqrt(n * 0.5 * 0.5)
# Normal approximation (continuity correction)
z <- (num_positive - mu ) / sigma
p_norm <- 1 - pnorm(z)
cat("\nNormal approximation p-value:\n")
print(p_norm)
# Remove values equal to 7
filtered_late <- late[late != 7]
# Count how many are greater than 7
n_late <- length(filtered_late)
num_positive_late <- sum(filtered_late > 7)
# Exact binomial test (sign test)
sign_test_late <- binom.test(num_positive_late, n_late, p = 0.5, alternative = "greater")
cat("\nSign Test Result (late > 7):\n")
print(sign_test_late)
# Normal approximation
mu_late <- n_late * 0.5
sigma_late <- sqrt(n_late * 0.5 * 0.5)
z_late <- (num_positive_late - mu_late) / sigma_late
p_norm_late <- 1 - pnorm(z_late)
cat("\nNormal approximation p-value (late):\n")
print(p_norm_late)
